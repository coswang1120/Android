(1) 加入 2 個 Basic Activity.
(2) 在網站的 public/images 中, 加入a.jpg, b.jpg, c.jpg 三張圖.
(3) 使用 AsyncTask與主機連接, 包括圖片下載, 產生 CardView 顯示, 
    CardView 可點擊, 在 Main2Acitvity 顯示資料,
	CardView 中有收藏按鈕, 點擊後, 將選擇資料傳給主機.


	
======================================================
(Node.js + Express)  
app.js
======================================================	
var express = require('express');
var path = require('path');
var favicon = require('serve-favicon');
var logger = require('morgan');
var cookieParser = require('cookie-parser');
var bodyParser = require('body-parser');

var routes = require('./routes/index');
var users = require('./routes/users');

//----------------------------------
var like = require('./routes/like');
//----------------------------------

var app = express();

// view engine setup
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'ejs');

// uncomment after placing your favicon in /public
//app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));
app.use(logger('dev'));
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, 'public')));

app.use('/', routes);
app.use('/users', users);

//----------------------
app.use('/like', like);
//----------------------

// catch 404 and forward to error handler
app.use(function(req, res, next) {
  var err = new Error('Not Found');
  err.status = 404;
  next(err);
});

// error handlers

// development error handler
// will print stacktrace
if (app.get('env') === 'development') {
  app.use(function(err, req, res, next) {
    res.status(err.status || 500);
    res.render('error', {
      message: err.message,
      error: err
    });
  });
}

// production error handler
// no stacktraces leaked to user
app.use(function(err, req, res, next) {
  res.status(err.status || 500);
  res.render('error', {
    message: err.message,
    error: {}
  });
});

module.exports = app;




======================================================
(Node.js + Express)  
index.js
======================================================	
var express = require('express');
var router = express.Router();


// *************************
// *     請修改網址        *
// *************************
var baseURL="http://192.168.56.1:3000/images/";   

router.get('/', function(req, res, next) {
	var data=generateData();		
    res.send(JSON.stringify(data));
});
 
router.post('/', function(req, res, next) {
	var data=generateData();
    res.send(JSON.stringify(data));
});

 
function generateData(){
	var data=[];
	
	var book={};	
	book.title="使用 Python";
	book.summary="這本實作指南將引領你從開始到結束，開發真正的網頁應用程式，藉此展示以 Python 進行測試驅動開發(TDD)的優點。"
	book.imgURL=baseURL+"a1.jpg";
	data.push(book);
	
	var book={};
	book.title="使用者故事對照";
	book.summary="使用者故事對照(user story mapping)是軟體開發的神兵利器，一旦理解為何及如何使用它，就能夠得益於這項寶貴的工具。"
	book.imgURL=baseURL+"a2.jpg";
	data.push(book);

	var book={};
	book.title="Modern C++ 中文版";
	book.summary="面對 C++11 與 C++14，不僅是要熟悉新加入的功能(例如：auto 型別宣告、搬移語義、lambda 運算式及並行支援)，更在於挑戰有效的運用這些功能，讓開發的軟體正確、有效率、易於維護且具有可攜性，這也是寫作本書的原因。"
	book.imgURL=baseURL+"a3.jpg";
	data.push(book);		
		
    return data;
}
 
module.exports = router;





======================================================
(Node.js + Express)  
like.js
======================================================
var express = require('express');
var router = express.Router();

var data=[];

router.get('/', function(req, res, next) {
	var id=req.param("id");
	var name=req.param("name");
	var date = new Date();	
	
	console.log('id=' + id);
	console.log('name=' + name);
	
	//******************************
	// 增加寫入資料庫程式
	//******************************
	data.push({"result":"OK"});	
    res.send(JSON.stringify(data));
});
 
 
router.post('/', function(req, res, next) {
	var id=req.body.id;
	var name=req.body.name;
	var date = new Date();
	
	console.log('id=' + id);
	console.log('name=' + name);	

	//******************************
	// 增加寫入資料庫程式
	//******************************
	data.push({"result":"OK"});	
    res.send(JSON.stringify(data));
});
 
module.exports = router;



======================================================
(Android)  
build.gradle
======================================================
apply plugin: 'com.android.application'

android {
    compileSdkVersion 24
    buildToolsVersion "23.0.2"

    defaultConfig {
        applicationId "com.abc.myapplication"
        minSdkVersion 21
        targetSdkVersion 24
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile 'com.android.support:cardview-v7:24.0.+'
    compile 'com.android.support:recyclerview-v7:24.0.+'
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:24.2.0'
    compile 'com.android.support:design:24.2.0'
}




======================================================
(Android)  
AndroidMainfest.xml
======================================================
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.abc.myapplication" >

    <!-- ........................ -->
    <uses-permission android:name="android.permission.INTERNET" />
    <!-- ........................ -->
	
    <application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:supportsRtl="true"
        android:theme="@style/AppTheme" >
        <activity
            android:name=".MainActivity"
            android:label="@string/app_name"
            android:theme="@style/AppTheme.NoActionBar" >
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />

                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
        <activity
            android:name=".Main2Activity"
            android:label="@string/title_activity_main2"
            android:theme="@style/AppTheme.NoActionBar" >
        </activity>
    </application>

</manifest>




======================================================
(Android)  
mylayout.xml
======================================================
<?xml version="1.0" encoding="utf-8"?>
<android.support.v7.widget.CardView
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:card_view="http://schemas.android.com/apk/res-auto"
    android:id="@+id/card_view"
    android:layout_gravity="center"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    card_view:cardCornerRadius="0dp"
    android:layout_marginLeft="6dp"
    android:layout_marginRight="6dp"
    android:layout_marginTop="6dp"
    android:layout_marginBottom="12dp">

    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="vertical"
        android:background="@color/cardBack">

        <ImageView
            android:layout_width="match_parent"
            android:layout_height="150dp"
            android:scaleType="centerCrop"
            android:id="@+id/imageView"
            />

        <TextView
            android:id="@+id/title_text"
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:textSize="18sp"
            android:layout_marginTop="10dp"
            android:layout_marginLeft="10dp"
            android:layout_marginRight="10dp"
            android:layout_marginBottom="0dp"
            android:gravity="left"
            />

        <TextView
            android:id="@+id/summary_text"
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:textSize="13sp"
            android:lineSpacingExtra="2dp"
            android:layout_margin="10dp"
            android:gravity="left"
            />

        <Button
            android:id="@+id/button"
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:textSize="13sp"
            android:text="@string/button_label"
            android:lineSpacingExtra="2dp"
            android:layout_margin="10dp"
            android:gravity="left"
            />
    </LinearLayout>
</android.support.v7.widget.CardView>





======================================================
(Android)  
activity_main.xml
======================================================
<?xml version="1.0" encoding="utf-8"?>
<android.support.design.widget.CoordinatorLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools" android:layout_width="match_parent"
    android:layout_height="match_parent" android:fitsSystemWindows="true"
    tools:context=".MainActivity">

    <android.support.design.widget.AppBarLayout android:layout_height="wrap_content"
        android:layout_width="match_parent" android:theme="@style/AppTheme.AppBarOverlay">

        <android.support.v7.widget.Toolbar android:id="@+id/toolbar"
            android:layout_width="match_parent" android:layout_height="?attr/actionBarSize"
            android:background="?attr/colorPrimary" app:popupTheme="@style/AppTheme.PopupOverlay" />

    </android.support.design.widget.AppBarLayout>

    <include layout="@layout/content_main" />

    <android.support.design.widget.FloatingActionButton android:id="@+id/fab"
        android:layout_width="wrap_content" android:layout_height="wrap_content"
        android:layout_gravity="bottom|end" android:layout_margin="@dimen/fab_margin"
        android:src="@android:drawable/arrow_down_float" />

</android.support.design.widget.CoordinatorLayout>





======================================================
(Android)  
activity_main2.xml
======================================================
<?xml version="1.0" encoding="utf-8"?>
<android.support.design.widget.CoordinatorLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools" android:layout_width="match_parent"
    android:layout_height="match_parent" android:fitsSystemWindows="true"
    tools:context="com.abc.myapplication.Main2Activity">

    <android.support.design.widget.AppBarLayout android:layout_height="wrap_content"
        android:layout_width="match_parent" android:theme="@style/AppTheme.AppBarOverlay">

        <android.support.v7.widget.Toolbar android:id="@+id/toolbar"
            android:layout_width="match_parent" android:layout_height="?attr/actionBarSize"
            android:background="?attr/colorPrimary" app:popupTheme="@style/AppTheme.PopupOverlay" />

    </android.support.design.widget.AppBarLayout>

    <include layout="@layout/content_main2" />

    <android.support.design.widget.FloatingActionButton android:id="@+id/fab"
        android:layout_width="wrap_content" android:layout_height="wrap_content"
        android:layout_gravity="bottom|end" android:layout_margin="@dimen/fab_margin"
        android:src="@android:drawable/ic_menu_revert" />

</android.support.design.widget.CoordinatorLayout>





======================================================
(Android)  
content_main.xml
======================================================
<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    xmlns:app="http://schemas.android.com/apk/res-auto" android:layout_width="match_parent"
    android:layout_height="match_parent" android:paddingLeft="@dimen/activity_horizontal_margin"
    android:paddingRight="@dimen/activity_horizontal_margin"
    android:paddingTop="@dimen/activity_vertical_margin"
    android:paddingBottom="@dimen/activity_vertical_margin"
    app:layout_behavior="@string/appbar_scrolling_view_behavior"
    tools:showIn="@layout/activity_main" tools:context=".MainActivity">

    <android.support.v7.widget.RecyclerView
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:id="@+id/recyclerView"/>
</RelativeLayout>





======================================================
(Android)  
content_main2.xml
======================================================
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    xmlns:app="http://schemas.android.com/apk/res-auto" android:layout_width="match_parent"
    android:layout_height="match_parent" android:paddingLeft="@dimen/activity_horizontal_margin"
    android:paddingRight="@dimen/activity_horizontal_margin"
    android:paddingTop="@dimen/activity_vertical_margin"
    android:paddingBottom="@dimen/activity_vertical_margin"
    android:orientation="vertical"
    app:layout_behavior="@string/appbar_scrolling_view_behavior"
    tools:showIn="@layout/activity_main2" tools:context="com.abc.myapplication.Main2Activity">

    <ScrollView
        android:layout_width="match_parent"
        android:layout_height="wrap_content">

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="vertical">

            <ImageView
                android:id="@+id/myImageView"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:scaleType="centerCrop"/>

            <TextView
                android:id="@+id/title"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:textSize="24dp"
                android:layout_margin="15dp"/>

            <TextView
                android:id="@+id/summary"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="15dp"
                android:layout_marginRight="15dp"
                android:layout_marginTop="5dp"
                android:lineSpacingExtra="6dp"
                android:textSize="16dp"/>
        </LinearLayout>
    </ScrollView>
</LinearLayout>





======================================================
(Android)  
colors.xml
======================================================
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <color name="colorPrimary">#743707</color>
    <color name="colorPrimaryDark">#1d0e00</color>
    <color name="colorAccent">#be6119</color>
    <color name="cardBack">#fcedc6</color>
</resources>





======================================================
(Android)  
dimens.xml
======================================================
<resources>
    <!-- Default screen margins, per the Android Design guidelines. -->
    <dimen name="activity_horizontal_margin">0dp</dimen>
    <dimen name="activity_vertical_margin">0dp</dimen>
    <dimen name="fab_margin">16dp</dimen>
</resources>




======================================================
(Android)  
strings.xml
======================================================
<resources>
    <string name="app_name">My Application</string>
    <string name="title_activity_main2">My Application2</string>
    <string name="action_settings">Settings</string>
    <string name="button_label">收藏</string>
</resources>






======================================================
(Android)  
data -> ImageObj.java
======================================================
package com.abc.myapplication.data;

import android.graphics.Bitmap;

public class ImageObj {
    public String imgURL;
    public Bitmap img;

    public String getImgURL(){return imgURL;}
    public Bitmap getImg(){return img;}
}




======================================================
(Android)  
data -> Book.java
======================================================
package com.abc.myapplication.data;


public class Book extends ImageObj {
    public String title;     //書名
    public String summary;   //摘要

    public Book(String title, String summary, String imgURL) {
        this.title = title;
        this.summary=summary;
        super.imgURL = imgURL;
    }

    public String getTitle(){return this.title;}
    public String getSummary(){return this.summary;}
}





======================================================
(Android)  
data -> Common.java
======================================================
package com.abc.myapplication.data;

import java.util.List;

public class Common {
    public static String url="http://192.168.56.1:3000";
    public static String urlLike="http://192.168.56.1:3000/like";
    public static List<ImageObj> books;
}





======================================================
(Android)  
async -> MyAsyncTask.java
======================================================
package com.abc.myapplication.async;

import android.app.ProgressDialog;
import android.content.Context;
import android.os.AsyncTask;

import com.abc.myapplication.data.Common;

import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;


public class MyAsyncTask extends AsyncTask<String, Integer, String> {
    Context context;
    private ProgressDialog loading;

    // 一個非同步工作完成後, 要執行onFinished()函式.
    // 宣告一個TaskListener介面.
    public interface TaskListener {
        void onFinished(String result);
    }

    // 一個非同步工作要有一個實作TaskListener的物件成員,
    // 此物件成員中一定有一個onFinished()方法,
    // 在非同步工作完成後將被呼叫.
    private final TaskListener taskListener;


    // 建構元, 傳入一個實作了TaskListener的物件.
    public MyAsyncTask(Context context, TaskListener taskListener) {
        this.context=context;
        this.taskListener = taskListener;
    }


    @Override
    protected void onPreExecute() {
        super.onPreExecute();
        loading = ProgressDialog.show(context, "下載中", "請稍等...", false, false);
    }

    @Override
    protected void onProgressUpdate(Integer... values) {
        super.onProgressUpdate(values);
    }


    //執行非同步工作
    @Override
    protected String doInBackground(String... params) {
        String data=null;
        InputStream inputStream=null;

        try {
            URL url = new URL(Common.url);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setReadTimeout(5000);
            conn.setConnectTimeout(10000);
            conn.setRequestMethod("POST");
            conn.setDoInput(true);
            conn.setDoOutput(true);

            conn.connect();
            inputStream = conn.getInputStream();

            //建立一個連接conn的bufferedReader
            BufferedReader bufferedReader=new BufferedReader(
                    new InputStreamReader(inputStream, "utf-8"));

            //讀回完整的JSON資料
            data=bufferedReader.readLine();
        } catch(Exception e) {
            e.printStackTrace();
        } finally {
            try {
                inputStream.close();
            } catch(Exception e) {}
        }

        //回傳讀取之資料
        return data;
    }


    //執行完非同步工作之後執行
    @Override
    protected void onPostExecute(String result) {
        super.onPostExecute(result);
        loading.dismiss();

        // 執行TaskListener物件成員中的onFinished()函式,
        // 將doInBackground()傳來的資料交給onFinished()函式執行.
        taskListener.onFinished(result);
    }

    @Override
    protected void onCancelled(String result) {
        super.onCancelled(result);
    }

    @Override
    protected void onCancelled() {
        super.onCancelled();
    }
}





======================================================
(Android)  
async -> MyAsyncTaskLike.java
======================================================
package com.abc.myapplication.async;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import android.os.AsyncTask;


public class MyAsyncTaskLike extends AsyncTask<String, Integer, String> {
    // 一個非同步工作完成後, 要執行onFinished()函式.
    // 宣告一個TaskListener介面.
    public interface TaskListener {
        void onFinished(String result);
    }

    // 一個非同步工作要有一個實作TaskListener的物件成員,
    // 此物件成員中一定有一個onFinished()方法, 在非同步工作完成後將被呼叫.
    private final TaskListener taskListener;

    // 建構元, 傳入一個實作了TaskListener的物件.
    public MyAsyncTaskLike(TaskListener taskListener) {
        this.taskListener = taskListener;
    }

    @Override
    protected void onPreExecute() {
        super.onPreExecute();
    }

    @Override
    protected void onProgressUpdate(Integer... values) {
        super.onProgressUpdate(values);
    }

    //執行非同步工作, 建立一個HttpURLConnection, 讀取主機的資料.
    @Override
    protected String doInBackground(String... params) {
        String data=null;
        InputStream inputStream = null;
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();

        try {
            URL url = new URL(params[0]);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setReadTimeout(10000);
            conn.setConnectTimeout(15000);
            conn.setRequestMethod("POST");
            conn.setDoInput(true);
            conn.setDoOutput(true);

            String args =
                    "id=" + URLEncoder.encode(params[1], "UTF-8") +
                            "&name=" + URLEncoder.encode(params[2], "UTF-8");

            OutputStream os = conn.getOutputStream();
            BufferedWriter writer = new BufferedWriter(
                    new OutputStreamWriter(os, "UTF-8"));
            writer.write(args);
            writer.flush();
            writer.close();
            os.close();

            conn.connect();
            inputStream = conn.getInputStream();

            //建立一個連接conn的bufferedReader
            BufferedReader bufferedReader=new BufferedReader(
                    new InputStreamReader(inputStream, "utf-8"));

            //讀回完整的JSON資料
            data=bufferedReader.readLine();
        } catch(Exception e) {
            e.printStackTrace();
        } finally {
            try {
                inputStream.close();
                outputStream.close();
            } catch(Exception e) {}
        }

        //回傳讀取之資料, onPostExecute()將接到回傳之資料.
        return data;
    }


    //執行完非同步工作之後執行
    @Override
    protected void onPostExecute(String result) {
        super.onPostExecute(result);

        // 執行TaskListener物件成員中的onFinished()函式,
        // 將doInBackground()傳來的資料交給onFinished()函式執行.
        taskListener.onFinished(result);
    }

    @Override
    protected void onCancelled(String result) {
        super.onCancelled(result);
    }

    @Override
    protected void onCancelled() {
        super.onCancelled();
    }
}





======================================================
(Android)  
adapter -> MyAdapter.java
======================================================
package com.abc.myapplication.adapter;

import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.support.v7.widget.CardView;
import android.support.v7.widget.RecyclerView;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import com.abc.myapplication.*;
import com.abc.myapplication.data.*;

import java.util.List;
import com.abc.myapplication.async.*;

public class MyAdapter extends RecyclerView.Adapter<MyAdapter.BookViewHolder>{
    static List<ImageObj> books;

    public static class BookViewHolder extends RecyclerView.ViewHolder {
        CardView cv;
        TextView titleText;
        TextView summaryText;
        ImageView bookImg;
        Button button;
        int position;

        BookViewHolder(View itemView) {
            super(itemView);
            cv = (CardView) itemView.findViewById(R.id.card_view);
            titleText = (TextView) itemView.findViewById(R.id.title_text);
            summaryText = (TextView) itemView.findViewById(R.id.summary_text);
            bookImg = (ImageView) itemView.findViewById(R.id.imageView);
            button=(Button)itemView.findViewById(R.id.button);

            //-------------------------------------------------------------------------------------
            //如果按了CardView, 轉至詳細頁面
            cv.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View view) {
                    Context context = view.getContext();

                    Bundle boundle = new Bundle();
                    boundle.putInt("position", position);

                    Intent intent = new Intent();
                    intent.putExtras(boundle);

                    intent.setClass(context, Main2Activity.class);
                    context.startActivity(intent);
                }
            });


            //如果按了收藏, 送點選資訊給主機
            button.setOnClickListener(new View.OnClickListener(){
                @Override
                public void onClick(View view) {
                    final Context context = view.getContext();

                    MyAsyncTaskLike myAsyncTaskLike = new MyAsyncTaskLike(new MyAsyncTaskLike.TaskListener() {
                        //連線結束後, 判斷由主機傳回的訊息
                        @Override
                        public void onFinished(String result) {
                            if(result==null){
                                Toast.makeText(context, "儲存失敗", Toast.LENGTH_SHORT).show();
                                return;
                            }else{
                                Toast.makeText(context, "已儲存", Toast.LENGTH_SHORT).show();
                                return;
                            }
                        }
                    });

                    //執行非同步連線
                    if(!myAsyncTaskLike.isCancelled()) {
                        //傳送點選項目的index及title給主機
                        Book book=(Book)books.get(position);
                        myAsyncTaskLike.execute(Common.urlLike, String.valueOf(position), book.getTitle());
                    } else {
                        Toast.makeText(context, "AsyncTask 已被取消 !",
                                Toast.LENGTH_SHORT).show();
                    }
                }
            });
            //-------------------------------------------------------------------------------------
        }
    }

    public MyAdapter(List<ImageObj> books){
        this.books = books;
    }

    @Override
    public int getItemCount() {
        return books.size();
    }

    @Override
    public BookViewHolder onCreateViewHolder(ViewGroup viewGroup, int i) {
        View v = LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.mylayout, viewGroup, false);
        BookViewHolder bookViewHolder = new BookViewHolder(v);

        return bookViewHolder;
    }

    @Override
    public void onBindViewHolder(BookViewHolder bookViewHolder, int i) {
        Book book=(Book)books.get(i);
        bookViewHolder.titleText.setText(book.title);
        bookViewHolder.summaryText.setText(book.summary);
        bookViewHolder.bookImg.setImageBitmap(books.get(i).img);

        bookViewHolder.position=i;
    }

    @Override
    public void onAttachedToRecyclerView(RecyclerView recyclerView) {
        super.onAttachedToRecyclerView(recyclerView);
    }
}





======================================================
(Android)  
GetBitmap.java
======================================================
package com.abc.myapplication;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.AsyncTask;

import com.abc.myapplication.data.ImageObj;

import java.net.URL;
import java.util.List;


public class GetBitmap extends AsyncTask<Void, Void, Void> {
    private Context context;
    private List<ImageObj> imageObjs;


    // 一個非同步工作完成後, 要執行onFinished()函式.
    // 宣告一個TaskListener介面.
    public interface TaskListener {
        void onFinished();
    }

    // 一個非同步工作要有一個實作TaskListener的物件成員,
    // 此物件成員中一定有一個onFinished()方法,
    // 在非同步工作完成後將被呼叫.
    private final TaskListener taskListener;


    public GetBitmap(Context context, List<ImageObj> imageObjs, TaskListener taskListener){
        this.context = context;
        this.imageObjs=imageObjs;
        this.taskListener = taskListener;
    }

    @Override
    protected void onPreExecute() {
        super.onPreExecute();
    }

    @Override
    protected void onPostExecute(Void aVoid) {
        super.onPostExecute(aVoid);
        taskListener.onFinished();
    }

    @Override
    protected Void doInBackground(Void... params) {
        for(int i=0; i<imageObjs.size(); i++){
            ImageObj imageObj=imageObjs.get(i);
            imageObj.img = getImage(imageObj.imgURL);   //由圖片地址下載圖片.
        }
        return null;
    }

    private Bitmap getImage(String bitmapUrl){
        URL url;
        Bitmap image = null;
        try {
            url = new URL(bitmapUrl);
            image = BitmapFactory.decodeStream(url.openConnection().getInputStream());
        }catch(Exception e){}
        return image;
    }
}





======================================================
(Android)  
Main2Activity.java
======================================================
package com.abc.myapplication;

import android.os.Bundle;
import android.support.design.widget.FloatingActionButton;
import android.support.design.widget.Snackbar;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.view.View;
import android.widget.ImageView;
import android.widget.TextView;

import com.abc.myapplication.data.Book;
import com.abc.myapplication.data.Common;

public class Main2Activity extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main2);
        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);

        FloatingActionButton fab = (FloatingActionButton) findViewById(R.id.fab);
        fab.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                finish();
            }
        });

        //-----------------------------------------------------------------
        ImageView imageView=(ImageView)this.findViewById(R.id.myImageView);
        TextView title=(TextView)this.findViewById(R.id.title);
        TextView summary=(TextView)this.findViewById(R.id.summary);

        Bundle boundle=getIntent().getExtras();
        int position=boundle.getInt("position");

        /* 由靜態變數及指標取得複點擊的資料 */
        Book book=(Book)Common.books.get(position);

        imageView.setImageBitmap(book.getImg());
        title.setText(book.getTitle());
        summary.setText(book.getSummary());
        //-----------------------------------------------------------------
    }
}





======================================================
(Android)  
MainActivity.java
======================================================
package com.abc.myapplication;

import android.content.Context;
import android.os.Bundle;
import android.support.design.widget.FloatingActionButton;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.support.v7.widget.Toolbar;
import android.view.View;
import android.view.Menu;
import android.view.MenuItem;
import android.widget.Toast;

import org.json.JSONArray;
import org.json.JSONObject;
import java.util.ArrayList;

import com.abc.myapplication.data.*;
import com.abc.myapplication.adapter.*;
import com.abc.myapplication.async.*;


public class MainActivity extends AppCompatActivity {    
    Context context;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);

        FloatingActionButton fab = (FloatingActionButton) findViewById(R.id.fab);
        fab.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                getData();
            }
        });


        context=this;
        getData();
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.menu_main, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        int id = item.getItemId();

        if (id == R.id.action_settings) {
            return true;
        }

        return super.onOptionsItemSelected(item);
    }


    //----------------
    // 下載資料
    //----------------
    private void getData(){
        // 產生一個非同步連線物件myAsyncTask,
        // 並且產生一個實作了TaskListener介面的物件作為參數,
        // 當myAsyncTask完成工作後, 即執行傳入物件的onFinished()函式.
        MyAsyncTask myAsyncTask = new MyAsyncTask(context, new MyAsyncTask.TaskListener() {
            // 實作介面應完成的方法
            @Override
            public void onFinished(String result) {
                try {
                    if(result==null){
                        Toast.makeText(context, "連線失敗", Toast.LENGTH_SHORT).show();
                        return;
                    }

                    JSONArray jsonArray = new JSONArray(result);
                    Common.books = new ArrayList<>();

                    for (int i = 0; i < jsonArray.length(); i++) {
                        try {
                            final JSONObject jsonObj = jsonArray.getJSONObject(i);

                            String title = jsonObj.getString("title");
                            String summary = jsonObj.getString("summary");
                            String imgURL =  jsonObj.getString("imgURL");

                            Common.books.add(new Book(title, summary, imgURL));
                        } catch (Exception e){}
                    }
                } catch (Exception e) {}


                //產生JSON資料後, 由圖片位址下載圖片.
                GetBitmap getBitmap = new GetBitmap(context, Common.books, new GetBitmap.TaskListener() {
                    // 下載圖片完成後執行的方法
                    @Override
                    public void onFinished() {
                        showData();
                    }
                });

                getBitmap.execute();  //執行圖片下載
            }
        });

        if(!myAsyncTask.isCancelled()) {
            myAsyncTask.execute();
        } else {
            Toast.makeText(context, "AsyncTask 已被取消 !",
                    Toast.LENGTH_SHORT).show();
        }
    }


    //----------------
    // 顯示資料
    //----------------
    public void showData(){
        MyAdapter adapter = new MyAdapter(Common.books);

        final LinearLayoutManager layoutManager = new LinearLayoutManager(this);
        layoutManager.setOrientation(LinearLayoutManager.VERTICAL);

        RecyclerView recyclerView = (RecyclerView) findViewById(R.id.recyclerView);
        recyclerView.setHasFixedSize(true);

        LinearLayoutManager llm = new LinearLayoutManager(context);
        recyclerView.setLayoutManager(llm);
        recyclerView.setAdapter(adapter);
    }
}

