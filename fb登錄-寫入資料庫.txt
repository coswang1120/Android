https://developers.facebook.com/quickstarts/1782809685285655/?platform=android

在facebook新增應用程式時,在
https://sourceforge.net/projects/openssl/?source=typ_redirect
下載openssl程式, 內有一<bin>資料夾,
複製到c碟, 資料夾名稱改為<openssl>

在命令題示字元中, cd openssl, 執行
keytool -exportcert -alias androiddebugkey -keystore %HOMEPATH%\.android\debug.keystore | openssl sha1 -binary | openssl base64  命令,
取得28個字元的hashCode, 將其加入申請步驟中.

在developers.facebook.com中,
在應用程式的"應用程式審查"(左邊選單)中,
將"是否發佈..."選項選"是", 表示應用程式目前已對外公開上線.

Android程式以API 21測試,
開一個有FAB按鈕的Activity



-------------------------------------------------------------
MySQL部份
存成 testdb.sql

建立一個testDB資料庫,
在testDB資料庫中執行 testdb.sql

testDB
    --user
        ---id               (*char(20))
	    ---name             (varchar(50))
	    ---registerDateTime (datetime)
-------------------------------------------------------------
SET FOREIGN_KEY_CHECKS=0;

DROP TABLE IF EXISTS `user`;
CREATE TABLE `user` (
  `id` char(20) COLLATE utf8_unicode_ci NOT NULL,
  `name` varchar(50) COLLATE utf8_unicode_ci DEFAULT NULL,
  `registerDateTime` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;





-------------------------------------------------------------
Express部份
執行:
express web -ejs
cd web
npm install
npm install mysql --save

(1)app.js
-------------------------------------------------------------
var express = require('express');
var path = require('path');
var favicon = require('serve-favicon');
var logger = require('morgan');
var cookieParser = require('cookie-parser');
var bodyParser = require('body-parser');

var routes = require('./routes/index');
var users = require('./routes/users');
//----------------------------------------
var register = require('./routes/register');
//----------------------------------------
var app = express();

// view engine setup
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'ejs');

// uncomment after placing your favicon in /public
//app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));
app.use(logger('dev'));
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, 'public')));

app.use('/', routes);
app.use('/users', users);
//----------------------------
app.use('/register', register);
//----------------------------
// catch 404 and forward to error handler
app.use(function(req, res, next) {
  var err = new Error('Not Found');
  err.status = 404;
  next(err);
});

// error handlers

// development error handler
// will print stacktrace
if (app.get('env') === 'development') {
  app.use(function(err, req, res, next) {
    res.status(err.status || 500);
    res.render('error', {
      message: err.message,
      error: err
    });
  });
}

// production error handler
// no stacktraces leaked to user
app.use(function(err, req, res, next) {
  res.status(err.status || 500);
  res.render('error', {
    message: err.message,
    error: {}
  });
});


module.exports = app;






-------------------------------------------------------------
Android部分
(2)<routes>中, register.js
-------------------------------------------------------------
var express = require('express');
var router = express.Router();
var mysql      = require('mysql');


/* GET home page. */
router.get('/', function(req, res, next) {
	var id=req.param("id");
	var name=req.param("name");
	var date = new Date();
	
	addUser(req, res, id, name, date);
});


/* POST home page. */
router.post('/', function(req, res, next) {
	var id=req.body.id;
	var name=req.body.name;
	var date = new Date();
	
	addUser(req, res, id, name, date);
});


function addUser(req, res, id, name, date){
	var connection = mysql.createConnection({
	  host     : 'localhost',
	  user     : 'root',
	  password : 'mysql',
	  database : 'testDB'
	});

	connection.connect();
	
	var newOne  = {id: id, name:name, registerDateTime:date};
	var data=[];
	
	connection.query('select * from user where id=?', id, function(err, results) {
        if (err){
            data.push({"result":"資料讀取失敗"});
			res.send(JSON.stringify(data));
			return;
        }else if(results.length==0){
			var connection2 = mysql.createConnection({
				host     : 'localhost',
				user     : 'root',
				password : 'mysql',
				database : 'testDB'
			});

			connection2.connect();
            
			connection2.query('insert into user set ?', newOne, function(err, rows, fields) {
				if (err){ 				
					data.push({"result":"註冊失敗"});
					res.send(JSON.stringify(data));
					return;
				}else{				
					data.push({"result":"註冊成功"});
					res.send(JSON.stringify(data));
					return;
				}
			});	
        }else{
            data.push({"result":"登入成功"});
			res.send(JSON.stringify(data));
			return;
        }
    });
}

module.exports = router;





-------------------------------------------------------------
Android部分
(1)build.gradle
-------------------------------------------------------------
apply plugin: 'com.android.application'

android {
    compileSdkVersion 24
    buildToolsVersion "24.0.0"

    defaultConfig {
        applicationId "com.abc.myapplication"
        minSdkVersion 21
        targetSdkVersion 24
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}
repositories {
    mavenCentral()
}
dependencies {
    compile 'com.facebook.android:facebook-android-sdk:[4,5)'
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:24.2.1'
    compile 'com.android.support:design:24.2.1'
}





-------------------------------------------------------------
Android部分
(2)AndroidManifest.xml
-------------------------------------------------------------
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    package="com.abc.myapplication">

    <uses-permission android:name="android.permission.INTERNET"/>

    <application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:supportsRtl="true"
        android:theme="@style/AppTheme" >

        <!--********************** -->
        <meta-data android:name="com.facebook.sdk.ApplicationId" android:value="@string/facebook_app_id"/>
        <!--********************** -->

        <activity
            android:name=".MainActivity"
            android:label="@string/app_name"
            android:theme="@style/AppTheme.NoActionBar" >
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />

                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>

        <activity android:name="com.facebook.FacebookActivity"
            tools:replace="android:theme"
            android:configChanges=
                "keyboard|keyboardHidden|screenLayout|screenSize|orientation"
            android:theme="@android:style/Theme.Translucent.NoTitleBar"
            android:label="@string/app_name" />

    </application>
</manifest>




-------------------------------------------------------------
Android部分
(3)strings.xml  (填入自己的 facebook_app_id)
-------------------------------------------------------------
<resources>
    <string name="app_name">My Application</string>
    <string name="action_settings">Settings</string>
    <string name="facebook_app_id">197*********817</string>
</resources>




-------------------------------------------------------------
Android部分
(4)content_main.xml
-------------------------------------------------------------
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    xmlns:app="http://schemas.android.com/apk/res-auto" android:layout_width="match_parent"
    android:layout_height="match_parent" android:paddingLeft="@dimen/activity_horizontal_margin"
    android:paddingRight="@dimen/activity_horizontal_margin"
    android:paddingTop="@dimen/activity_vertical_margin"
    android:paddingBottom="@dimen/activity_vertical_margin"
    android:orientation="vertical"
    app:layout_behavior="@string/appbar_scrolling_view_behavior"
    tools:showIn="@layout/activity_main" tools:context=".MainActivity">

    <com.facebook.login.widget.LoginButton
        android:id="@+id/login_button"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_gravity="center_horizontal"
        android:layout_marginTop="30dp"
        android:layout_marginBottom="30dp" />

</LinearLayout>





-------------------------------------------------------------
Android部分
(4)Common.java
-------------------------------------------------------------
package com.abc.myapplication;

public class Common {
    public static String url="http://120.97.15.192:3000/register";
}




-------------------------------------------------------------
Android部分
(5)存在<async>中, MyAsyncTask.java
-------------------------------------------------------------
package com.abc.myapplication.async;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import android.os.AsyncTask;


public class MyAsyncTask extends AsyncTask<String, Integer, String> {
    // 一個非同步工作完成後, 要執行onFinished()函式.
    // 宣告一個TaskListener介面.
    public interface TaskListener {
        void onFinished(String result);
    }

    // 一個非同步工作要有一個實作TaskListener的物件成員,
    // 此物件成員中一定有一個onFinished()方法, 在非同步工作完成後將被呼叫.
    private final TaskListener taskListener;

    // 建構元, 傳入一個實作了TaskListener的物件.
    public MyAsyncTask(TaskListener taskListener) {
        this.taskListener = taskListener;
    }

    @Override
    protected void onPreExecute() {
        super.onPreExecute();
    }

    @Override
    protected void onProgressUpdate(Integer... values) {
        super.onProgressUpdate(values);
    }

    //執行非同步工作, 建立一個HttpURLConnection, 讀取主機的資料.
    @Override
    protected String doInBackground(String... params) {
        String data=null;
        InputStream inputStream = null;
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();

        try {
            URL url = new URL(params[0]);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setReadTimeout(10000);
            conn.setConnectTimeout(15000);
            conn.setRequestMethod("POST");
            conn.setDoInput(true);
            conn.setDoOutput(true);

            String args =
                    "id=" + URLEncoder.encode(params[1], "UTF-8") +
                            "&name=" + URLEncoder.encode(params[2], "UTF-8");

            OutputStream os = conn.getOutputStream();
            BufferedWriter writer = new BufferedWriter(
                    new OutputStreamWriter(os, "UTF-8"));
            writer.write(args);
            writer.flush();
            writer.close();
            os.close();

            conn.connect();
            inputStream = conn.getInputStream();

            //建立一個連接conn的bufferedReader
            BufferedReader bufferedReader=new BufferedReader(
                    new InputStreamReader(inputStream, "utf-8"));

            //讀回完整的JSON資料
            data=bufferedReader.readLine();
        } catch(Exception e) {
            e.printStackTrace();
        } finally {
            try {
                inputStream.close();
                outputStream.close();
            } catch(Exception e) {}
        }

        //回傳讀取之資料, onPostExecute()將接到回傳之資料.
        return data;
    }


    //執行完非同步工作之後執行
    @Override
    protected void onPostExecute(String result) {
        super.onPostExecute(result);

        // 執行TaskListener物件成員中的onFinished()函式,
        // 將doInBackground()傳來的資料交給onFinished()函式執行.
        taskListener.onFinished(result);
    }

    @Override
    protected void onCancelled(String result) {
        super.onCancelled(result);
    }

    @Override
    protected void onCancelled() {
        super.onCancelled();
    }
}




-------------------------------------------------------------
Android部分
(6)MainActivity.java
-------------------------------------------------------------
package com.abc.myapplication;


import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.support.design.widget.FloatingActionButton;
import android.support.design.widget.Snackbar;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.view.View;
import android.view.Menu;
import android.view.MenuItem;
import android.widget.Toast;

import com.facebook.CallbackManager;
import com.facebook.FacebookCallback;
import com.facebook.FacebookException;
import com.facebook.FacebookSdk;
import com.facebook.GraphRequest;
import com.facebook.GraphResponse;
import com.facebook.login.LoginResult;
import com.facebook.login.widget.LoginButton;

import java.util.Date;
import com.abc.myapplication.async.*;
import org.json.JSONArray;
import org.json.JSONObject;


public class MainActivity extends AppCompatActivity {
    LoginButton loginButton;

    CallbackManager callbackManager;
    Context context;
    private int requestCode;

    SharedPreferences sharedPreferences;
    //------------------------------------------
    private MyAsyncTask myAsyncTask;
    //------------------------------------------
    @Override
    protected void onCreate(final Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        //------------------------------------------------------
        FacebookSdk.sdkInitialize(getApplicationContext());
        //------------------------------------------------------

        context=this;
        setContentView(R.layout.activity_main);

        //-----------------------------------------------------------------------------------
        // Context.MODE_PRIVATE  檔案只能由創建的Application取用.
        // Context.MODE_APPEND   檢查檔是否存在，存在就往檔追加內容，否則就新創

        sharedPreferences=this.getSharedPreferences("MyLogin", Context.MODE_PRIVATE);
        //-----------------------------------------------------------------------------------

        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);

        FloatingActionButton fab = (FloatingActionButton) findViewById(R.id.fab);
        fab.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                //--------------------------------------------------------------------------
                String name=sharedPreferences.getString("name", "***");
                Snackbar.make(view, "stored name:"+name, Snackbar.LENGTH_LONG)
                        .setAction("Action", null).show();
                //-------------------------------------------------------------------------
            }
        });

        //-------------------------------------------------------------------------
        callbackManager = CallbackManager.Factory.create();

        final LoginButton loginButton = (LoginButton) findViewById(R.id.login_button);

        // Callback registration
        loginButton.registerCallback(callbackManager, new FacebookCallback<LoginResult>() {
            @Override
            public void onSuccess(LoginResult loginResult) {
                // App code
                GraphRequest request = GraphRequest.newMeRequest(
                        loginResult.getAccessToken(),
                        new GraphRequest.GraphJSONObjectCallback() {
                            @Override
                            public void onCompleted(JSONObject object, GraphResponse response) {
                                try {
                                    //----------------------------------------------------------
                                    String id=object.getString("id");
                                    String name = object.getString("name");
                                    String time=new Date(System.currentTimeMillis()).toString();

                                    //Toast.makeText(context, name , Toast.LENGTH_SHORT).show();

                                    SharedPreferences.Editor editor=sharedPreferences.edit();
                                    editor.putString("id", id);
                                    editor.putString("name", name);
                                    editor.putString("time", time);

                                    editor.apply();

                                    // 產生一個非同步連線物件myAsyncTask,
                                    // 並且產生一個實作了TaskListener介面的物件作為參數,
                                    // 當myAsyncTask完成工作後, 即執行傳入物件的onFinished()函式.
                                    myAsyncTask = new MyAsyncTask(new MyAsyncTask.TaskListener() {
                                        // 實作介面應完成的方法
                                        //-------------------------------------------------------------
                                        @Override
                                        public void onFinished(String result) {
                                            try{
                                                // 將字串轉為ArrayList, 作為SimpleAdapter的輸入參數.
                                                JSONArray jsonArray = new JSONArray(result);
                                                final JSONObject jsonObj = jsonArray.getJSONObject(0);

                                                Toast.makeText(context, jsonObj.getString("result"), Toast.LENGTH_SHORT).show();
                                            }catch(Exception e){}
                                        }
                                        //-------------------------------------------------------------
                                    });


                                    //執行非同步連線
                                    if(!myAsyncTask.isCancelled()) {
                                        myAsyncTask.execute(Common.url, id, name);
                                    } else {
                                        Toast.makeText(context, "AsyncTask 已被取消 !",
                                                Toast.LENGTH_SHORT).show();
                                    }
                                    //----------------------------------------------------------
                                }catch(Exception e){
                                    Toast.makeText(context, "Exception! ", Toast.LENGTH_SHORT).show();
                                }
                            }
                        }
                );

                Bundle parameters = new Bundle();
                //目前的Facebook API 2.8版不支援取出 bio 內容.
                //parameters.putString("fields", "id, name, about, bio, email, gender, birthday");
                parameters.putString("fields", "id, name, about, email, gender, birthday");
                request.setParameters(parameters);
                request.executeAsync();
            }

            @Override
            public void onCancel() {
                Toast.makeText(context, "Cancel", Toast.LENGTH_SHORT).show();
            }

            @Override
            public void onError(FacebookException exception) {
                Toast.makeText(context, "Error", Toast.LENGTH_SHORT).show();
            }
        });
        //-------------------------------------------------------------------------
    }


    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.menu_main, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();

        //noinspection SimplifiableIfStatement
        if (id == R.id.action_settings) {
            return true;
        }

        return super.onOptionsItemSelected(item);
    }

    //---------------------------------------------------------------------------------
    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        callbackManager.onActivityResult(requestCode,
                resultCode, data);
    }
    //---------------------------------------------------------------------------------
}