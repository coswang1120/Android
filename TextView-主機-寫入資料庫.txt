(1) 加入 1 個 Basic Activity.
(2) 使用 AsyncTask與主機連接,  
    畫面有 2 個 TextView 可輸入資料,
	點擊寫入資料庫按鈕後, 將資料傳給主機並寫入資料庫.


	
======================================================
資料庫sql
======================================================		
SET FOREIGN_KEY_CHECKS=0;
-- ----------------------------
-- Table structure for `mytable`
-- ----------------------------
DROP TABLE IF EXISTS `mytable`;
CREATE TABLE `mytable` (
  `serNo` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(500) COLLATE utf8_unicode_ci DEFAULT NULL,
  `content` text COLLATE utf8_unicode_ci,
  PRIMARY KEY (`serNo`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;


	
	
======================================================
(Node.js + Express)  
index.js
======================================================	
var express = require('express');
var router = express.Router();
var mysql = require('mysql');


// POST傳輸
router.post('/', function(req, res, next) {
	var title=req.body.title;
	var content=req.body.content;
	
	console.log(title);
	console.log(content);
	
	
	//寫入資料庫
	var connection = mysql.createConnection({
	  host     : 'localhost',
	  user     : 'root',
	  password : 'mysql',
	  database : 'testdb'
	});
	
	var data=[];
	
	connection.connect(function(err) {
		if (err) {
		    console.log('資料庫連結錯誤');
			data.push({result:'資料庫連結錯誤'});
			res.send(JSON.stringify(data));
			return;
		}	
		
		connection.query('INSERT INTO mytable SET ?', {title:title, content:content}, function(err, result) {
			if (err){
				console.log('資料庫寫入錯誤');
				data.push({result:'資料庫寫入錯誤'});
				res.send(JSON.stringify(data));
				return;
			}
			
			console.log('儲存成功');
			data.push({result:'儲存成功'});
			res.send(JSON.stringify(data));
		});			
	});
});


module.exports = router;






======================================================
(Android)  
AndroidMainfest.xml
======================================================
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.abc.myapplication" >

    <!-- ............................. -->
    <uses-permission android:name="android.permission.INTERNET"/>
    <!-- ............................. -->

    <application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:supportsRtl="true"
        android:theme="@style/AppTheme" >
        <activity
            android:name=".MainActivity"
            android:label="@string/app_name"
            android:theme="@style/AppTheme.NoActionBar" >
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />

                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
    </application>

</manifest>





======================================================
(Android)  
activity_main.xml
======================================================
<?xml version="1.0" encoding="utf-8"?>
<android.support.design.widget.CoordinatorLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:fitsSystemWindows="true"
    tools:context="com.abc.myapplication.MainActivity">

    <android.support.design.widget.AppBarLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:theme="@style/AppTheme.AppBarOverlay">

        <android.support.v7.widget.Toolbar
            android:id="@+id/toolbar"
            android:layout_width="match_parent"
            android:layout_height="?attr/actionBarSize"
            android:background="?attr/colorPrimary"
            app:popupTheme="@style/AppTheme.PopupOverlay" />

    </android.support.design.widget.AppBarLayout>

    <include layout="@layout/content_main" />

    <android.support.design.widget.FloatingActionButton
        android:id="@+id/fab"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_gravity="bottom|end"
        android:layout_margin="@dimen/fab_margin"
        android:src="@android:drawable/ic_dialog_email" />

</android.support.design.widget.CoordinatorLayout>





======================================================
(Android)  
content_main.xml
======================================================
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    xmlns:app="http://schemas.android.com/apk/res-auto" android:layout_width="match_parent"
    android:layout_height="match_parent" android:paddingLeft="@dimen/activity_horizontal_margin"
    android:paddingRight="@dimen/activity_horizontal_margin"
    android:paddingTop="@dimen/activity_vertical_margin"
    android:paddingBottom="@dimen/activity_vertical_margin"
    android:orientation="vertical"
    app:layout_behavior="@string/appbar_scrolling_view_behavior"
    tools:showIn="@layout/activity_main" tools:context=".MainActivity">

    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="horizontal">

        <Button
            android:layout_width="0dp"
            android:layout_weight="1"
            android:layout_height="wrap_content"
            android:text="寫入資料庫"
            android:id="@+id/button1"/>
    </LinearLayout>

    <android.support.design.widget.TextInputLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"    >
        <EditText
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:inputType="textMultiLine"
            android:maxLength="500"
            android:maxLines="1"
            android:id="@+id/title"
            android:hint="標題" />
    </android.support.design.widget.TextInputLayout>

    <android.support.design.widget.TextInputLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content">
        <AutoCompleteTextView
            android:id="@+id/content"
            android:hint="發文內容"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:inputType="textMultiLine"
            android:maxLength="500"
            android:maxLines="10"
            android:singleLine="false" />
    </android.support.design.widget.TextInputLayout>
</LinearLayout>





======================================================
(Android)  
async -> MyAsyncTask.java
======================================================
package com.abc.myapplication.async;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;

import android.app.ProgressDialog;
import android.content.Context;
import android.os.AsyncTask;


public class MyAsyncTask extends AsyncTask<String, Integer, String> {
    private ProgressDialog loading;
    private Context context;

    // 一個非同步工作完成後, 要執行onFinished()函式.
    // 宣告一個TaskListener介面.
    public interface TaskListener {
        void onFinished(String result);
    }

    // 一個非同步工作要有一個實作TaskListener的物件成員,
    // 此物件成員中一定有一個onFinished()方法, 在非同步工作完成後將被呼叫.
    private final TaskListener taskListener;

    // 建構元, 傳入一個實作了TaskListener的物件.
    public MyAsyncTask(Context context, TaskListener taskListener) {
        this.context=context;
        this.taskListener = taskListener;
    }

    @Override
    protected void onPreExecute() {
        super.onPreExecute();
        loading = ProgressDialog.show(context, "下載中", "請稍等...", false, false);
    }

    @Override
    protected void onProgressUpdate(Integer... values) {
        super.onProgressUpdate(values);
    }

    //執行非同步工作, 建立一個HttpURLConnection, 讀取主機的資料.
    @Override
    protected String doInBackground(String... params) {
        String data=null;
        InputStream inputStream = null;
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();

        try {
            URL url = new URL(params[0]);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setReadTimeout(10000);
            conn.setConnectTimeout(15000);
            conn.setRequestMethod("POST");
            conn.setDoInput(true);
            conn.setDoOutput(true);

			//****************************************
			//  傳給主機參數設定
			//****************************************
            String args =
                    "title=" + URLEncoder.encode(params[1], "UTF-8") +
                    "&content=" + URLEncoder.encode(params[2], "UTF-8");

            OutputStream os = conn.getOutputStream();
            BufferedWriter writer = new BufferedWriter(
                    new OutputStreamWriter(os, "UTF-8"));
            writer.write(args);
            writer.flush();
            writer.close();
            os.close();

            conn.connect();
            inputStream = conn.getInputStream();

            //建立一個連接conn的bufferedReader
            BufferedReader bufferedReader=new BufferedReader(
                    new InputStreamReader(inputStream, "utf-8"));

            //讀回完整的JSON資料
            data=bufferedReader.readLine();
        } catch(Exception e) {
            e.printStackTrace();
        } finally {
            try {
                inputStream.close();
                outputStream.close();
            } catch(Exception e) {
                e.printStackTrace();
            }
        }

        //回傳讀取之資料, onPostExecute()將接到回傳之資料.
        return data;
    }


    //執行完非同步工作之後執行
    @Override
    protected void onPostExecute(String result) {
        super.onPostExecute(result);

        // 執行TaskListener物件成員中的onFinished()函式,
        // 將doInBackground()傳來的資料交給onFinished()函式執行.
        loading.dismiss();
        taskListener.onFinished(result);
    }

    @Override
    protected void onCancelled(String result) {
        super.onCancelled(result);
    }

    @Override
    protected void onCancelled() {
        super.onCancelled();
    }
}






======================================================
(Android)  
MainActivity.java
======================================================
package com.abc.myapplication;

import android.content.Context;
import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

import com.abc.myapplication.async.*;
import org.json.JSONArray;
import org.json.JSONObject;


public class MainActivity extends AppCompatActivity {
    Context context;
    private MyAsyncTask myAsyncTask;
    TextView textViewTitle, textViewContent;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        context = this;
        Button button1=(Button)this.findViewById(R.id.button1);
        textViewTitle=(TextView)this.findViewById(R.id.title);
        textViewContent=(TextView)this.findViewById(R.id.content);

        //與主機連線
        button1.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                // 產生一個非同步連線物件myAsyncTask,
                // 並且產生一個實作了TaskListener介面的物件作為參數,
                // 當myAsyncTask完成工作後, 即執行傳入物件的onFinished()函式.
                myAsyncTask = new MyAsyncTask(context, new MyAsyncTask.TaskListener() {
                    // 實作介面應完成的方法
                    @Override
                    public void onFinished(String result) {
                        try{
                            if(result==null){
                                Toast.makeText(context, "連線失敗", Toast.LENGTH_SHORT).show();
                                return;
                            }

                            // 將字串轉為ArrayList, 作為SimpleAdapter的輸入參數.
                            JSONArray jsonArray = new JSONArray(result);
                            final JSONObject jsonObj = jsonArray.getJSONObject(0);

                            Toast.makeText(context, jsonObj.getString("msg"), Toast.LENGTH_SHORT).show();
                        }catch(Exception e){}
                    }
                });

                //執行非同步連線
                if(!myAsyncTask.isCancelled()) {
					//****************************************
					//  主機位址設定
					//****************************************
                    String url = "http://192.168.56.1:3000";
                    String title=textViewTitle.getText().toString();
                    String content=textViewContent.getText().toString();

                    myAsyncTask.execute(url, title, content);   //依序傳入網址及訊息
                } else {
                    Toast.makeText(context, "連線已取消", Toast.LENGTH_SHORT).show();
                }
            }
        });
    }
}
